#!/usr/bin/env ruby

require 'ostruct'

class Main
    
    @@universes = []

    def self.execute
        @@universes ||= []
        @@universes << Universe.new
        STDIN.each_line do |line|
            line.chomp!
            if line.empty?
                @@universes << Universe.new
            else
                @@universes.last.build line
            end
        end
        if ARGV[0].nil?
            @@universes.each do |universe|
                universe.final_state!.pretty_print
                puts
            end
        elsif %w(-n -N).include? ARGV[0]
            puts 'Find numbers here.'
        else
          puts 'Usage => ./etude11 {-n|-N} < input.txt'
        end
    end
end

class Universe

    attr_accessor :iterations
    
    def initialize
        @grid = []
    end

    def build(universe_line)
        @grid << universe_line.split('')
    end

    # Generate final state of the universe.=
    def final_state!
        current_changes = 0
        previous_changes = nil
        while current_changes != previous_changes || previous_changes.nil?
            previous_changes = current_changes
            current_changes = 0
            @grid.each.with_index do |row, idx_row|
                row.each.with_index do |col, idx_col|
                    if col != 'I'
                        neighbours = find_neighbours(idx_row, idx_col)
                        count = 0
                        neighbours.each do |ngh|
                            if @grid[ngh.row][ngh.col] == 'S'
                                count += 1
                            end
                        end
                        if count >= 2
                            @grid[idx_row][idx_col] = 'S'
                            current_changes += 1
                        end
                    end
                end
            end
        end

        self
    end

    def find_neighbours(idx_row, idx_col)
        neighbours = []
        # Top neighbour
        ngh_row = idx_row - 1
        ngh_col = idx_col
        neighbour = validate_neighbour ngh_row, ngh_col
        neighbours << neighbour unless neighbour.nil?


        # Bottom neighbour
        ngh_row = idx_row + 1
        ngh_col = idx_col
        neighbour = validate_neighbour ngh_row, ngh_col
        neighbours << neighbour unless neighbour.nil?
        
        # Left neighbour
        ngh_row = idx_row
        ngh_col = idx_col - 1
        neighbour = validate_neighbour ngh_row, ngh_col
        neighbours << neighbour unless neighbour.nil?
        
        # Right neighbour
        ngh_row = idx_row
        ngh_col = idx_col + 1
        neighbour = validate_neighbour ngh_row, ngh_col
        neighbours << neighbour unless neighbour.nil?
       
        neighbours
    end

    def validate_neighbour(ngh_row, ngh_col)
        if (ngh_row >= 0 && ngh_col >= 0) &&
            (ngh_row < @grid.size && ngh_col < @grid[ngh_row].size)
            struct = OpenStruct.new
            struct.row = ngh_row
            struct.col = ngh_col
            struct
        end
    end

    def pretty_print
        @grid.each do |row|
            row.each do |col|
               print col
            end
            puts
        end
    end
end

Main.execute
